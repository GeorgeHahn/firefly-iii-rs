/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 0.10.4
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://openapi-generator.tech
 */


use serde::{Deserialize, Serialize};



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Bill {
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Use either currency_id or currency_code
    #[serde(rename = "currency_id", skip_serializing_if = "Option::is_none")]
    pub currency_id: Option<i32>,
    /// Use either currency_id or currency_code
    #[serde(rename = "currency_code", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    #[serde(rename = "currency_symbol", skip_serializing_if = "Option::is_none")]
    pub currency_symbol: Option<String>,
    #[serde(rename = "currency_decimal_places", skip_serializing_if = "Option::is_none")]
    pub currency_decimal_places: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "amount_min")]
    pub amount_min: f64,
    #[serde(rename = "amount_max")]
    pub amount_max: f64,
    #[serde(rename = "date")]
    pub date: String,
    /// How often the bill must be paid.
    #[serde(rename = "repeat_freq")]
    pub repeat_freq: RepeatFreq,
    /// How often the bill must be skipped. 1 means a bi-monthly bill.
    #[serde(rename = "skip", skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    /// If the bill is active.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    /// When the bill is expected to be due.
    #[serde(rename = "next_expected_match", skip_serializing_if = "Option::is_none")]
    pub next_expected_match: Option<String>,
    /// Array of future dates when the bill is expected to be paid. Autogenerated.
    #[serde(rename = "pay_dates", skip_serializing_if = "Option::is_none")]
    pub pay_dates: Option<Vec<String>>,
    /// Array of past transactions when the bill was paid.
    #[serde(rename = "paid_dates", skip_serializing_if = "Option::is_none")]
    pub paid_dates: Option<Vec<crate::models::BillPaidDates>>,
}

impl Bill {
    pub fn new(name: String, amount_min: f64, amount_max: f64, date: String, repeat_freq: RepeatFreq) -> Bill {
        Bill {
            created_at: None,
            updated_at: None,
            currency_id: None,
            currency_code: None,
            currency_symbol: None,
            currency_decimal_places: None,
            name,
            amount_min,
            amount_max,
            date,
            repeat_freq,
            skip: None,
            active: None,
            notes: None,
            next_expected_match: None,
            pay_dates: None,
            paid_dates: None,
        }
    }
}

/// How often the bill must be paid.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum RepeatFreq {
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "half-year")]
    HalfYear,
    #[serde(rename = "yearly")]
    Yearly,
}

